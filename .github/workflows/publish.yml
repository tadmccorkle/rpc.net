on:
  push:
    branches:
      - main
name: publish
jobs:
  publish:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    # build and test
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build Projects
      run: dotnet build /p:Configuration=CI
    - name: Test Projects
      run: dotnet test --no-build /p:Configuration=CI /p:CollectCoverage=true /p:CoverletOutputFormat=lcov

    # merge lcov results
    - name: Set Up NPM
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install 'lcov-result-merger'
      run: npm i -g lcov-result-merger
    - name: Merge Test Coverage
      run: lcov-result-merger "tests/**/coverage*.info" "lcov.info"

    # upload code coverage
    - name: Coveralls GitHub Action
      uses: coverallsapp/github-action@1.1.3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./lcov.info

    # publish updated nuget packages
    - name: Publish to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        $nupkgs = dir "src\**\bin\CI\*.nupkg" -Recurse
        foreach ($nupkg in $nupkgs) {
          $nupkgName = ($nupkg.BaseName -split '\.\d+\.\d+\.\d+$')[0]
          $nupkgVersion = $nupkg.BaseName -match '\d+\.\d+\.\d+$' | %{ $Matches[0] }
          try {
            $publishedVersions = (Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/$nupkgName/index.json").Content
            if ( $publishedVersions -match "$nupkgVersion" ) {
              continue
            }
          } catch { }
          dotnet nuget push -k $env:NUGET_API_KEY -s https://api.nuget.org/v3/index.json $nupkg.FullName
        }

    # build and publish docs
    - name: Install DocFX with Chocolatey
      uses: crazy-max/ghaction-chocolatey@v1.6.0
      with:
        args: install docfx
    - name: DocFX Build
      run: docfx docfx.json
    - name: Publish to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3.7.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: _site
